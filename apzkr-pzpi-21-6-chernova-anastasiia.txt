Міністерство освіти і науки України
Харківський національний університет радіоелектроніки

Факультет комп’ютерних наук

Кафедра програмної інженерії

КУРСОВА РОБОТА
ПОЯСНЮВАЛЬНА ЗАПИСКА
з навчальної дисципліни «Архітектура програмного забезпечення»
Тема роботи: Програмна система для управління кінотеатрами

Студент гр. ПЗПІ-21-6 		__________________ Чернова А.М.
(підпис)
Керівник роботи 			___________________ ст.викл. Сокорчук І.П.
(підпис)
Роботу захищено «     »            2024 р.
з оцінкою _________________________

Комісія: 				___________________ доц. Лещинський В.О.
(підпис)
___________________ доц. Лещинська І.О.
(підпис)
___________________ ст.викл. Сокорчук І.П.
(підпис)



Харків 
2024  
Харківський національний університет радіоелектроніки

Факультет комп’ютерних наук		 Кафедра програмної інженерії      
Спеціальність 121 - Інженерія програмного забезпечення			         
Курс  	3	  Семестр  					6			         
Навчальна дисципліна Архітектура програмного забезпечення                         

ЗАВДАННЯ 
НА КУРСОВУ РОБОТУ СТУДЕНТОВІ
				Черновій Анастасії Максимівні     			         
1. Тема проекту:	«Програмна система для управління кінотеатрами» 	                    
2. Термін узгодження завдання курсової роботи  «  01  »  квітня  2024 р.  
3. Термін здачі студентом закінченої роботи  «     »                 2024 р.	  
4. Вихідні дані до проєкту (роботи):	в програмній системі передбачити: ведення бази даних фільмів, розклад сеансів, продаж квитків, бронювання місць, створення рекомендацій фільмів, реєстрація нових користувачів, управління залами.. Використовувати ОС Windows 10, СКБД PostgreSQL, середовище розробки Microsoft Visual Studio Code 2019                                                            
5. Зміст пояснювальної записки (перелік питань, що належить розробити): вступ, аналіз предметної області, постановка задачі, проектування програмного проекту, структура бази даних, архітектура програмного проекту, опис розробленої програмної системи, висновки, перелік посилань, додатки	    
6. Перелік графічного матеріалу (діаграми, рисунки, інтерфейси):	схема бази даних, UML діаграма розгортання, UML діаграма прецедентів, UML діаграма компонентів, UML діаграма взаємодії, UML діаграму діяльності, UML діаграма станів, UML діаграма пакетів, інтерфейси сторінок програмного продукту 

КАЛЕНДАРНИЙ ПЛАН

№	Назва етапів виконання курсової роботи	Термін виконання
етапів  курсової роботи	Примітка
1	Обрання теми роботи	01.04.2024	Виконано
2	Розробка аркуша завдання та Vision & Scope	02.04.2024	Виконано
3	Розробка серверної / back-end частини програмної системи	15.04.2023	
4	Розробка програмного забезпечення для IoT або Smart Device пристрою	01.05.2023	
5	Розробка клієнтської / front-end частини програмної системи	15.05.2023	
6	Розробка мобільного програмного застосунку	27.05.2023	
7	Оформлення пояснювальної записки	07.06.2023	
8	Захист курсової роботи	20.06.2023	

Дата видачі завдання «  01  »             квітня           2024 р.

Керівник 	______________ ст.викл. Сокорчук І.П.
		       (підпис)
Завдання прийняв до виконання
ст.гр. ПЗПІ-21-6 	_____________ Чернова А.М.
		       (підпис) 

РЕФЕРАТ

Пояснювальна записка до курсового проєктування: 77 с., 1 рис., 1 табл., 7 джерел, 4 додатки.
АДМІНІСТРАТОР, АРХІТЕКТУРА, БАЗА ДАНИХ, БРОНЮВАННЯ, ВІДГУКИ, КВИТКИ, КІНОТЕАТРИ, КОРИСТУВАЧ, МІСЦЯ, МОВА ПРОГРАМУВАННЯ JAVASCRIPT, ПРОГРАМНА СИСТЕМА, РЕКОМЕНДАЦІЇ, СЕАНСИ, ФІЛЬМИ, API, KOTLIN, NODE JS, REACT.
Метою курсової роботи є розробка програмної системи для управління кінотеатрами, що буде сприяти покращенню роботи кінотеатрів, включаючи зручність додатків для користувачів. Система забезпечить ефективне керування фільмами, сеансами, бронюванням місць та продажем квитків. Вона також надасть можливості для збору відгуків, рекомендацій та оцінок, що дозволить кінотеатрам краще розуміти потреби своїх клієнтів. 
Серверна частина написана на мові програмування JavaScript за допомогою фреймворку NodeJS з PostgreSQL у якості СУБД. Клієнтська частина реалізована за допомогою фреймворку React на мові програмування JavaScript. Мобільний застосунок розроблений за допомогою мови програмування Kotlin.
В результаті курсової роботи створено програмну систему для управління кінотеатрами «CineMagic».

 
ЗМІСТ


ВСТУП	7
1	АНАЛІЗ ПРЕДМЕТНОЇ ОБЛАСТІ	9
1.1	Загальний опис проблеми	9
1.2	Аналіз існуючих аналогів	10
1.3	Потреби клієнтів та ринку	11
2	КОНЦЕПЦІЯ РІШЕННЯ	13
2.1	Окреслення концепції	13
2.2	Головна функціональність	14
2.3	Рамки первинного випуску	15
2.4	Рамки наступних випусків	17
2.5	Обмеження та винятки	18
2.6	Робоче середовище	18
3	ЗАГАЛЬНА АРХІТЕКТУРА ПРОЄКТУ	21
3.1	Архітектурні рішення та використані технології	21
4	ПРОЕКТУВАННЯ ТА КОДУВАННЯ СЕРВЕРНОЇ ЧАСТИНИ	24
4.1	Моделювання програмної системи	24
4.2	Проєктування моделі даних	25
4.3	Специфікація REST	27
5	ПРОЕКТУВАННЯ ТА КОДУВАННЯ КЛІЄНСТЬКОЇ ЧАСТИНИ	32
5.1	Структура проєкту	32
5.2	Взаємодія користувачів та клієнтської частини	34
6	ПРОЄКТУВАННЯ ТА КОДУВАННЯ МОБІЛЬНОЇ ЧАСТИНИ	36
6.1	Технології та архітектура мобільної частини	36
6.2	Структура мобільної частини	37
6.3	Взаємодія користувачів з мобільною частиною	38
7	ОГЛЯД РЕАЛІЗОВАНИХ ЧАСТИН ДОДАТКУ	40
7.1	Клієнтська частина додатку	40
7.2	Мобільна частина додатку	42
ВИСНОВКИ	43
ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ	44
ДОДАТОК А	45
ДОДАТОК Б	50
ДОДАТОК В	58
ДОДАТОК Г	77
 
ВСТУП


У наш час, коли розваги та дозвілля відіграють важливу роль у повсякденному житті людей, ефективне управління кінотеатрами стає важливим завданням. Кінотеатри є ключовими у культурній індустрії, оскільки вони забезпечують якісний кінодосвід для глядачів та сприяють поширенню кіномистецтва. Сучасні кінотеатри мають проблеми, такі як технічні збої в системах бронювання квитків, незручний інтерфейс для користувачів, а також застарілі системи управління.
Розробка програмної системи для управління кінотеатрами має на меті вирішити ці проблем. Буде розроблено та впроваджено різноманітні функції для управління продажами квитків, бронюванням місць, контролем за наповненістю залу та іншими аспектами роботи кінотеатру. Після впровадження даної системи власники кінотеатрів отримують можливість своєчасно реагувати на потреби клієнтів і забезпечувати оптимальні умови для глядачів, а також підвищувати ефективність своєї роботи.
Дана система актуальна, бо необхідно негайне підвищення якості обслуговування та ефективності управління кінотеатрами. Застосування системи управління дозволяє значно спростити роботу працівникам кінотеатрів. Це набуває особливої важливості в умовах сучасних технологічних викликів та зростаючих вимог до якості обслуговування клієнтів.
Розробка системи для керування та моніторингу кінотеатром є перспективною, оскільки вона забезпечує інноваційний підхід до управління кінотеатрами, використовуючи сучасні технології для надання ефективного і якісного обслуговування клієнтів. 
Метою роботи є створення системи для кінотеатрів, яка полегшить роботу працівникам, надасть зручний інструмент клієнтам та скоротить витрати власникам кінотеатрів. Програмна система повинна включати кілька компонентів, зокрема серверну частину, клієнтську частину та мобільний застосунок. 
 
1	АНАЛІЗ ПРЕДМЕТНОЇ ОБЛАСТІ
1.1	Загальний опис проблеми


Сучасні кінотеатри – це місця дозвілля та розваг для будь-якого віку. Проте як власники кінотеатрів, так і їхні відвідувачі стикаються з певними труднощами та проблемами. Включаючи недостатній рівень обслуговування та зручності для глядачів, а також необхідність впровадження новітніх технологій для покращення якості обслуговування.
Опис проблем у кінотеатрах часто є занадто загальним, без конкретизації труднощів, з якими стикаються користувачі. Проблеми з бронюванням квитків можуть стосуватися як технічних збоїв в системі, так і незручного інтерфейсу для користувачів, що ускладнює процес покупки квитків та бронюванні квитків.
Основні чинники, що впливають на виникнення цих проблем, включають технологічні обмеження, недостатню автоматизацію процесів,  застарілі системи управління ресурсами. Недостатня автоматизація процесів обслуговування клієнтів може спричиняти затримки та незадоволення глядачів.
У цьому контексті, розробка систем програмного забезпечення для керування кінотеатром є неминучим кроком до покращення роботи кінотеатрів і задоволення потреб сучасної аудиторії. 
Дана робота має допомогти вирішити ці проблеми, забезпечивши клієнтів та працівників кінотеатрів простою та зручною програмною системою для управління кінотеатрами, покращуючи взаємодію з клієнтами та забезпечуючи високий рівень обслуговування.
Крім того, недосконалість інфраструктури кінотеатрів може призводити до неефективного використання простору, недостатньої комфортності для глядачів та незручностей у роботі персоналу.

1.2	Аналіз існуючих аналогів


Програмна система для управління кінотеатрами відкриває широкі можливості для оптимізації та підвищення ефективності бізнесу кінотеатрів. Основна бізнес-можливість програмної системи для управління кінотеатрами полягає у комплексній автоматизації та оптимізації численних процесів, які зараз виконуються вручну або частково автоматизовані різними неінтегрованими рішеннями. Це дозволить істотно підвищити ефективність роботи кінотеатрів, скоротити витрати та збільшити прибутки.
На сьогоднішній день на ринку відсутні повноцінні програмні рішення, спеціалізовані саме на управлінні кінотеатрами. Існуючі аналоги не відповідають всім потребам кінотеатрів та можуть бути лише частковими рішеннями. Тому розробка програмної системи для управління кінотеатрами може стати ключовою бізнес-можливістю, що задовольнить потреби ринку і принесе значний комерційний успіх.
Провівши глибокий аналіз конкурентів та аналогів обраної програмної системи для управління кінотеатрами. Зокрема, розглядаються multiplex.ua, Theatre Management System, з метою виявлення переваг обраного продукту.
Multiplex.ua - це вітчизняна система онлайн-продажу квитків у кінотеатри. Її основні можливості – це продаж квитків онлайн, мобільні додатки для iOS та Android, список кінотеатрів, розклад сеансів, опис фільмів, система знижок та бонусів для клієнтів. Недоліками є те, що ця система обмежена лише продажам квитків.
Theatre Management System - комплексне програмне рішення для кінотеатрів. Основні можливості – система продажу квитків, модуль управління розкладом кіносеансів, облік фінансових операцій, звітність, управління маркетинговими акціями та рекламою, модуль управління харчовим виробництвом. Недоліки: застаріла архітектура, відсутність мобільних додатків, висока вартість.
Програмна система буде спеціально розроблена для вирішення конкретних завдань, з якими стикаються кінотеатри. Вона буде мати всі необхідні функції для ефективного управління продажами квитків, бронювання місць, контролем за наповненістю зали та іншими аспектами роботи кінотеатру. Такий комплексний підхід зробить систему привабливою для бізнесу та забезпечить її конкурентоспроможність на ринку.
Модель монетизації передбачає використання системи підписки для кінотеатрів, що бажають скористатися програмним рішенням. Це дозволить стабілізувати потік прибутку та забезпечити стабільність фінансового стану проєкту.


1.3	Потреби клієнтів та ринку


Головними клієнтами даної системи є власники кінотеатрів та кіномереж. Для них критично важливо, щоб система була багатоплатформенною, безвідмовною, масштабованою та зручною у використанні.
Основні потреби клієнтів та ринку, які враховані при розробці програмної системи для управління кінотеатрами:
-	ефективне управління бронюванням квитків, власники кінотеатрів потребують зручних інструментів для максимізації продажів квитків через різні канали - онлайн, офлайн каси, мобільні додатки;
-	оптимізація робочих процесів, максимально спростити всі бізнес-процеси для підвищення ефективності та економії ресурсів;
-	покращення обслуговування відвідувачів для збільшення лояльності аудиторії потрібні інструменти персоналізації, рекомендацій.
-	масштабованість для великих кіномереж, що потребують легкого розгортання системи в нових закладах, агрегування даних;
-	зручність використання, система має бути інтуїтивно зрозумілою і легкою в освоєнні для різних категорій персоналу кінотеатрів;
-	висока продуктивність: оперативна робота системи критично важлива під час пікових навантажень.
 
2	КОНЦЕПЦІЯ РІШЕННЯ
2.1	Окреслення концепції


Програмна система для управління кінотеатрами - це комплексний інструмент для автоматизації та оптимізації ключових бізнес-процесів сучасних кінотеатрів. Охоплюючи повний цикл діяльності від продажу квитків до управління персоналом, система забезпечує максимальну ефективність роботи кінотеатрів.
Призначення продукту:
-	спеціалізація для кінотеатрів буде розроблено з урахуванням специфічних потреб закладів кіноіндустрії для максимальної ефективності;
-	повна автоматизація процесів охоплює всі аспекти - продаж квитків, розклад, фінанси, персонал;
-	зручний інтуїтивний інтерфейс, простота використання та швидка адаптація персоналу;
-	гнучкість та адаптованість, можливість налаштування під особливі потреби кожного кінотеатру.
Система створена, щоб полегшити управління для працівників кінотеатрів (бронювання місць, продаж квитків, підрахунок прибутку, відстеження наповненості залів, базування персоналу кінотеатру) та для клієнтів кінотеатрів (інтуїтивно зрозуміле використання додатків)
Застосування сучасних технологій дозволить повністю автоматизувати продаж, бронювання місць через усі канали, впровадити особисті квитки в кошику, контролювати прибуток з продажу квитків.
Безпека є ключовим аспектом системи. Вона оснащена сучасними засобами захисту даних для забезпечення конфіденційності особистих даних користувачів. Надійні механізми безпеки забезпечують стійкість системи до кібератак та інших загроз, а регулярні оновлення безпеки допомагають запобігати можливим загрозам.
Крім того, система передбачає надання всебічної технічної підтримки. Користувачі можуть розраховувати на допомогу служби технічної підтримки у разі виникнення проблем або питань щодо використання системи.
Загалом, система має на меті комплексну оптимізацію бізнес-процесів кінотеатрів для збільшення їх прибутковості та підвищення якості обслуговування відвідувачів. Масштабованість дозволить швидко впроваджувати продукт як у невеликих закладах, так і у великих кіномережах.


2.2	Головна функціональність


Головна функціональність системи виходячи з потреб включає:
-	реєстрація та авторизація в системі для різних ролей (адміністратор, користувач);
-	додавання та збереження інформації про фільми, включаючи назву, опис, тривалість, категорію, рейтинг і постер;
-	можливість перегляду трейлерів;
-	модуль продажу квитків онлайн з вибором місць;
-	моніторинг доступності та наповненості місць у кінозалах;
-	управління розкладом кіносеансів;
-	модуль меню;
-	онлайн-бронювання місць у кінозалах;
-	управління цінами на квитки/товари;
-	облік фінансових операцій – виручка;
-	управління системою відгуків та оцінок фільмів користувачами;
-	можливість надсилання відгуків на пошту компанії;
-	підтримка різних мов та локалізація інтерфейсу;
-	аналітика продажів;
-	мобільні додатки для бронювання квитків та обслуговування клієнтів;
-	гнучка система налаштувань, ролей, дозволів користувачів;
-	створення та редагування контенту веб-сайту;
-	створення рекомендацій для клієнтів;
-	заходи захисту даних, такі як шифрування, автентифікація та авторизація, для забезпечення безпеки конфіденційної інформації користувачів та системних налаштувань.


2.3	Рамки первинного випуску


Серверна частина:
-	зберігання та управління профілями користувачів;
-	обробка та зберігання інформації про фільми та сеанси;
-	управління бронюванням та продажом квитків;
-	створення розкладу сеансів;
-	забезпечення безпеки даних;
-	аналітика для адміністрації кінотеатру;
-	використання ефективних математичних методів обробки користувацьких даних.
	Веб-застосунок:
-	інтерфейс для керування розкладом і фільмами для адміністраторів;
-	сторінки фільмів із детальною інформацією та трейлерами;
-	функціонал вибору місць та бронювання квитків;
-	рекомендації для користувачів;
-	сторінка меню;
-	модуль зворотного зв'язку і рейтингу фільмів;
-	сторінка кошика;
-	реєстрація, авторизація персоналу для доступу до системи;
-	перегляд, редагування, видалення інформації про сеанси;
-	перегляд, редагування, видалення інформації про робітників;
-	перегляд квитків для клієнтів;
-	перегляд звітності з прибутку;
-	перегляд вільних та зайнятих місць;
-	перегляд розкладу кінопоказів.
Мобільний застосунок:
-	управління особистими акаунтами (реєстрація, авторизація);
-	перегляд розкладу сеансів;
-	перегляд фільмів;
-	перегляд детальної інформації про окремий фільм, з можливістю перегляду трейлерів;
-	перегляд наповненості залів;
-	можливість бронювання квитків;
-	перегляд меню кінотеатру;
-	застосування механізмів аутентифікації користувачів, таких як паролі або біометричні дані, для забезпечення безпеки та захисту персональної інформації.


2.4	Рамки наступних випусків


Для подальшого поетапного розвитку системи  для управління кінотеатрами передбачається включити такі основні функції у наступних випусках:
-	інтеграція з відеохостингами для автоматичного оновлення трейлерів фільмів;
-	впровадження штучного інтелекту для аналізу поведінки користувачів і підвищення точності персоналізованих рекомендацій;
-	розробка системи лояльності для заохочення частого відвідування кінотеатрів;
-	модуль для створення та управління спеціальними подіями (прем'єри фільмів, кіноночі);
-	функція "Друзі", що дозволяє користувачам бачити, на які фільми йдуть їхні друзі та планувати спільні відвідування;
-	можливість замовлення їжі та напоїв через додаток для отримання в кінотеатрі;
-	використання IoT пристроїв для автоматизації управління освітленням, звуком та іншим обладнанням в кінозалах.
2.5	Обмеження та винятки


Розглянемо існуючі обмеження та винятки даної системи:
-	не передбачається підтримка праці застарілих браузерів, які не підтримують сучасні технології;
-	не включено функціональність для автономного режиму роботи без інтернет-з'єднання;
-	обмежена сумісність з випадками установки на старі або застарілі операційні системи, які можуть бути несумісними з деякими технологічними рішеннями нової системи.
-	при використанні нових технологій або виборі певних стандартів, можуть виникнути обмеження у сумісності зі старішими версіями програмного забезпечення або обладнання, яке використовується у кінотеатрах;
-	певні функції або додаткові можливості можуть бути виключені з поточної версії програмної системи з метою ефективного та швидкого запуску базового функціоналу, але будуть розглядатися для включення в майбутні оновлення.


2.6	Робоче середовище


Система повинна забезпечувати підтримку користувачів з різних регіонів, що включає безперебійну роботу в різних часових зонах. Дані, які будуть створюватися та використовуватися в різних місцях, вимагають врахування відстаней між цими локаціями та можливості їхньої інтеграції. Це дозволить забезпечити зручний та постійний доступ користувачів до системи.
Для гарантування безпеки даних система повинна включати ефективні засоби контролю доступу, такі як аутентифікація та авторизація. Паролі користувачів повинні зберігатися у хешованому вигляді для додаткового рівня захисту. Відстеження сесій буде здійснюватися за допомогою JWT токенів, що забезпечить надійність та безпеку роботи з системою.
Важливим аспектом є стійкість системи до збоїв. Вона повинна бути здатною відновлюватися після помилок без втрати даних, що гарантує безперервність її функціонування. Крім того, система повинна забезпечувати високу продуктивність, що включає мінімальний час затримки та швидку відповідь на запити користувачів. Це забезпечить оптимальний досвід взаємодії з системою та задоволеність користувачів.
Отримати доступ до мобільного додатку планується для користувачів пристроїв, які використовують операційну систему Android версії 4.4 або новіше. Веб-сайт буде розроблений з огляду на його повну сумісність з усіма сучасними браузерами. Використання цих популярних браузерів забезпечить ефективне функціонування та коректну відображення вмісту веб-сайту. 
Вack-end частина буде реалізована на мові програмування JavaScript за допомогою фреймворку NodeJS з PostgreSQL у якості СУБД. Фреймворк Node.js - це середовище виконання JavaScript, яке дозволяє створювати швидкі та масштабовані мережеві додатки. Він відомий своєю асинхронною моделлю вводу/виводу (I/O), що дозволяє ефективно обробляти багато одночасних з'єднань. Node.js широко використовується для розробки веб-серверів, API та інших серверних додатків, завдяки своїй високій продуктивності та модульності. Front-end частина буде реалізована за допомогою фреймворку React на мові програмування JavaScript. React - це бібліотека JavaScript для побудови користувацьких інтерфейсів. Вона відома своєю ефективністю в створенні інтерактивних та високопродуктивних веб-додатків завдяки використанню віртуального DOM (Document Object Model), який мінімізує маніпуляції з реальним DOM і значно покращує швидкість рендерингу. React широко використовується для розробки одно-сторінкових додатків та інших динамічних інтерфейсів завдяки своїй компонентній архітектурі, яка сприяє повторному використанню коду та легкому управлінню станом додатку.
Мобільний застосунок буде розроблений за допомогою мови програмування Kotlin і з використанням Android SDK. Kotlin — це сучасна мова програмування, яка офіційно підтримується Google для розробки Android-додатків. Вона відрізняється відмінною читабельністю коду, безпекою типів, а також підтримкою функціонального програмування. Android SDK — це набір інструментів, бібліотек та компонентів, які надають необхідні інструменти для створення Android-додатків. Він включає в себе різноманітні компоненти для роботи з графічним інтерфейсом, мережевими запитами, базами даних та іншими аспектами розробки. Також для розширення функціональності та полегшення розробки використовуватимуться інші компоненти і бібліотеки, такі як AndroidX, Material Components, Dagger Hilt для управління залежностями, Kotlin Coroutines для асинхронних операцій та інші. Цей стек технологій дозволяє створювати продуктивні, ефективні та сучасні Android-додатки, забезпечуючи високу якість і зручність в розробці і підтримці.
 
3	ЗАГАЛЬНА АРХІТЕКТУРА ПРОЄКТУ
3.1	Архітектурні рішення та використані технології


Back-end частина реалізована на мові програмування JavaScript за допомогою фреймворку NodeJS. Використовується PostgreSQL як система управління базами даних (СУБД). NodeJS дозволяє створювати ефективний та масштабований back-end з використанням JavaScript. Він має вбудовану підтримку для роботи з базами даних, в тому числі з PostgreSQL. 
Для збереження даних використовуються міграції та ORM TypeORM. Це спрощує роботу з базою даних та дозволяє описувати моделі даних за допомогою класів JavaScript. Також реалізовано автентифікацію за допомогою JSON Web Token. Проєкт представлений чотирма функціональними частинами. Компоненти та взаємодія між ними представлені на діаграмі розгортання (див. рис. 3.1). Функціональні частини програмної системи: 
-	серверна частина; 
-	клієнтська частина; 
-	мобільний застосунок; 
-	база даних (PostgreSQL).

 
Рисунок 3.1 – Діаграма розгортання програмної системи
В якості сервера бази даних використовується PostgreSQL - популярна реляційна СУБД з відкритим вихідним кодом. Вона забезпечує надійне зберігання та ефективну обробку даних. 
Основний обмін даними в системі відбувається через серверну частину застосунку. Саме серверна частина відповідає за бізнес-логіку та доступ до даних. 
Взаємодія серверної частини з іншими компонентами системи відбувається наступним чином: 
⎯ з клієнтською частиною - через REST API за протоколом HTTPS; 
⎯ з мобільними додатками - через HTTPS.
Веб-інтерфейс системи розгортається на клієнтських пристроях, а сервери системи розгортаються на фізичних серверах. Цей розподіл забезпечує високу доступність системи, оскільки клієнтські пристрої можуть бути розташовані в будь-якому місці. 
Система використовує протокол безпеки HTTPS для захисту даних, що передаються між клієнтом і сервером. Цей протокол допомагає захистити дані від несанкціонованого доступу. 
Користувачі використовують веб-браузер на своєму комп'ютері або на своєму мобільному пристрої, щоб переглядати веб-сторінку. 
Розглянемо реалізацію авторизації в системі. Процес аутентифікації базується на використанні JSON Web Token - компактного формату передачі даних між сторонами. При успішній верифікації користувача генерується JWT токен, що містить зашифровані дані про користувача, такі як ідентифікатор, роль, період дії токена. Строк дії токена в цій системі становить 24 години. Після закінчення цього періоду необхідно заново пройти авторизацію для отримання нового токена. JWT токен додається до HTTP заголовків при кожному запиті до захищених ресурсів. На стороні сервера відбувається перевірка дійсності і актуальності даного токена перед наданням доступу до запитуваного ресурсу. Такий підхід дозволяє реалізувати аутентифікацію стану користувача. Безпека даних забезпечується шляхом хешування паролів .
Інтернаціоналізація відбувається так: дані на сервері зберігаються за часом UTC, а клієнти можуть вказувати зміщення часу відносно UTC. Це дозволяє використовувати програму в будь-якому часовому поясі. Програма підтримує кодування UTF-8 та ASCII. Це дозволяє зберігати та передавати інформацію в базі даних різними мовами. 
Програмним шляхом можна виконувати адміністрування базою даних. Для цього потрібно звертатися до певних кінцевих точок серверної частини. 
Програмний код поділений на різні компоненти за допомогою просторів імен. Це покращує читабельність та гнучкість коду. Використовуються декілька зовнішніх бібліотек. Це дозволяє використовувати в програмі готові функції та можливості.
 
4	ПРОЕКТУВАННЯ ТА КОДУВАННЯ СЕРВЕРНОЇ ЧАСТИНИ
4.1	Моделювання програмної системи


Для демонстрації дій користувача в додатку, було створено діаграму прецедентів (див. рис. А.1). Діаграма презентує функціонал доступний користувачам при використанні застосунка. Програмна система передбачає 3 категорії користувачів: неавторизований авторизований користувач, адміністратор, головний адміністратор.
Користувач починає з перегляду меню, де він може ознайомитися з доступними фільмами та іншими послугами. Авторизація дозволяє користувачу увійти до системи, щоб здійснювати додаткові дії. Після авторизації користувач може переглянути всі фільми, обрати конкретний фільм для детальнішого перегляду або переглянути конкретний зал, щоб побачити доступні місця. Користувач може забронювати місце в залі або безпосередньо придбати квиток. Перегляд квитка дозволяє користувачу перевірити деталі придбаного квитка. Якщо користувач забронював місце, він може переглянути заброньовані місця та додати квиток до корзини. Користувач може переглянути індивідуальні рекомендації фільмів та надіслати відгук на фільм на пошту CineMagic.
Адміністратор може створювати нові зали та оновлювати інформацію про існуючі зали. При необхідності може видаляти зали з системи. Адміністратор відповідає за створення та оновлення квитків, видалення квитків та управління бронюванням місць. Має можливість переглядати всі квитки, додавати їх до корзини та переглядати всі заброньовані місця, переглядати та редагувати інформацію про працівників кінотеатру, створювати нових працівників та видаляти існуючих, оновлювати меню, видаляти позиції з меню та оновлювати інформацію про фільми, створювати нові фільми або видаляти їх з системи.
Розглянемо діаграму діяльності (див.рис.А.2), що зображує послідовність дій при процесі вибору фільму, перегляду його розкладу, бронювання місця та створення квитка в системі управління кінотеатрами.
Діаграма починається з точки входу, що символізує старт процесу. Користувач обирає фільм для перегляду. Якщо обраний фільм не підходить, можна обрати інший фільм. Користувач переглядає детальну інформацію про обраний фільм. Дивиться доступні розклади для обраного фільму. Обирає конкретний показ для перегляду фільму. Якщо на цей фільм є інші покази, можна обрати інший показ, якщо обраний не підходить. Користувач переглядає доступні місця в залі для обраного показу. Якщо є вільні місця -можна забронювати місце. Якщо немає вільних місць - повертається до вибору іншого показу. Користувач бронює місце в залі для обраного показу. Система створює квиток для заброньованого місця та обраного показу. Процес завершується в точці виходу, що символізує завершення всіх дій.


4.2	Проєктування моделі даних


База даних для програмної системи управління кінотеатрами складається з 11 таблиць: меню, працівники, фільми, відгуки, розклади, квитки, корзини, місця, користувачі, зали. Для створення бази даних було розроблено ER-модель даних (див.рис.А.3). Опис сутностей: 
  -	FoodMenuItems - інформація про страви з меню: id, назва, опис, ціна, URL зображення страви;
  -	Employees - інформація про працівників: id, роль, дата прийому на роботу, фото, дати створення та оновлення записів;
  -	Movies - інформація про фільми: id, назва, опис, тривалість, жанр, рейтинг, URL постера та трейлера, дати створення та оновлення записів;
  -	Reviews - відгуки про фільми: id, рейтинг, коментар, дати створення та оновлення;
  -	Schedules - розклад сеансів: id, час початку та закінчення, дата, дати створення та оновлення;
  -	Tickets - придбані квитки: id, дати створення, оновлення та придбання, ціна;
  -	Baskets і BasketTickets - непорожні кошики придбаних квитків та їх деталі;
  -	Seats - інформація про місця в залі: id, номери ряду та місця, дати створення та оновлення;
  -	Users - інформація про користувачів: id, електронна адреса, пароль, роль, дати створення та оновлення;
  -	Halls - інформація про кінозали: id, назва, загальна кількість місць, дати створення та оновлення.
Опис зв’язків:
  -	один фільм може мати багато розкладів;
  -	один квиток одне місце;
  -	один розклад може бути пов'язаний з багатьма квитками;
  -	один зал може мати багато місць;
  -	один користувач може мати багато квитків в кошику;
  -	один кошик може містити багато квитків;
  -	один користувач може залишати багато відгуків.

4.3	Специфікація REST


Застосунок взаємодіє з серверною частиною за допомогою REST API. REST API - це стиль архітектури веб-служб, який використовує HTTP для взаємодії з ресурсами. Специфікація усіх кінцевих точок REST API наведена у таблиці 1. Ця таблиця містить інформацію про те, як використовувати кожну кінцеву точку для доступу до ресурсу.

Таблиця 1 – Специфікація REST
HTTP метод 	Кінцева точка 	Опис 
POST 
	/api/user/registration	Реєстрація нового користувача
POST 
	/api/user/login	Авторизація користувача
GET	/api/user/auth	Перевірка аутентифікації користувача
PUT	/api/user/update/{id} 	Оновлення даних користувача за вказаним ідентифікатором
DEL	api/user/delete/{id}	Видалення користувача за вказаним ідентифікатором
GET	/api/user/{id}	Отримання інформації про користувача за вказаним ідентифікатором
POST 
	/api/movie	Створення нового фільму.


Продовження таблиці 1 – Специфікація REST
HTTP метод 	Кінцева точка 	Опис 
GET	/api/movie	Отримання списку всіх фільмів.
GET	api/movie/{id}	Отримання інформації про фільм за вказаним ідентифікатором.
PUT	/api/movie/{id}	Оновлення даних фільму за вказаним ідентифікатором.
DEL	/api/movie/{id}	Видалення фільму за вказаним ідентифікатором.
POST 
	/api/food	Створення нової позиції меню
GET	/api/food	Отримання списку всіх позицій меню
PUT	/api/food/{id}	Оновлення даних про позицію меню за вказаним ідентифікатором
DEL	/api/food/{id}	Видалення позиції меню за вказаним ідентифікатором
POST 
	/api/halls	Створення нового залу
GET	/api/halls	Отримання списку всіх залів
GET	/api/halls/{id}	Отримання інформації про зал за вказаним ідентифікатором
Продовження таблиці 1 – Специфікація REST
HTTP метод 	Кінцева точка 	Опис 
PUT	/api/halls/{id}	Оновлення даних залу за вказаним ідентифікатором
DEL	/api/halls/{id}	Видалення залу за вказаним ідентифікатором
POST 	/api/schedule	Створення нового розкладу показів
GET	/api/schedule/{id}	Отримання інформації про розклад за вказаним ідентифікатором
GET	/api/schedule	Отримання списку всіх розкладів показів
PUT	/api/schedule/{id}	Оновлення розкладу показів за вказаним ідентифікатором
DEL	/api/schedule/{id}	Видалення розкладу показів за вказаним ідентифікатором
POST 	/api/tickets	Створення нового квитка
GET	/api/tickets/{id}	Отримання інформації про квиток за вказаним ідентифікатором
GET	/api/tickets	Отримання списку всіх квитків
PUT	/api/tickets/{id}	Оновлення даних квитка за вказаним ідентифікатором

Продовження таблиці 1 – Специфікація REST
HTTP метод 	Кінцева точка 	Опис 
DEL	/api/tickets/{id}	Видалення квитка за вказаним ідентифікатором
POST 	/api/seats	Бронювання нового місця в залі
GET	/api/seats/{id}	Отримання інформації про місце в залі за вказаним ідентифікатором
GET	/api/seats	Отримання списку всіх місць в залі
PUT	/api/seats/{id}	Оновлення даних про місце в залі за вказаним ідентифікатором
DEL	/api/seats/{id}	Видалення місця в залі за вказаним ідентифікатором
GET	/api/baskets/{id}	Отримання інформації про корзину користувача за вказаним ідентифікатором
GET	/api/basketsTickets/{id}	Отримання інформації про квитки в корзині користувача за вказаним ідентифікатором
POST 	/api/employee	Створення нового працівника
GET	/api/employee	Отримання списку всіх працівників

Продовження таблиці 1 – Специфікація REST
HTTP метод 	Кінцева точка 	Опис 
GET	/api/employee/{id}	Отримання інформації про працівника за вказаним ідентифікатором
PUT	/api/employee/{id}	Оновлення даних працівника за вказаним ідентифікатором
DEL	/api/employee/{id}	Видалення працівника за вказаним ідентифікатором
GET	/api/reviews	Отримання списку всіх відгуків про фільми
GET	/api/recomendation	Отримання списку індивідуальних рекомендацій для користувачів
 
5	ПРОЕКТУВАННЯ ТА КОДУВАННЯ КЛІЄНСТЬКОЇ ЧАСТИНИ
5.1	Структура проєкту


Реалізація клієнтської частини системи ґрунтується на використанні фреймворку React та мови JavaScript. Проект має чітко організовану структуру директорій та файлів, що дозволяє ефективно розробляти, тестувати та підтримувати додаток. 
Нижче наведено опис основних директорій та файлів проекту (див.рис.А.4).
Загальна структура проекту client:
- public- містить статичні файли, такі як index.html, які є точкою входу для додатка;
- src - основна директорія, де розташований весь вихідний код додатка.
Деталізація директорії src:
- components - компоненти, які використовуються в додатку. Вони розділені на піддиректорії для кращої організації;
 - models - компоненти для створення моделей для адміністраторської панелі;
- AppRouter.jsx - компонент для маршрутизації додатка;
- NavBar.jsx - компонент для навігаційної панелі;
- http - файли для роботи з API. Тут розташовані функції для здійснення HTTP-запитів до серверної частини.
- pages - компоненти сторінок додатка;
- routes - файли для налаштування маршрутизації у додатку;
- style- файли стилів для оформлення додатка;
 - utils- допоміжні файли та функції;
- App.js - головний компонент додатка;
- i18n.js - файли для багатомовної підтримки у додатку;
- index.js - точка входу в додаток.
Реалізація здійснюється з використанням компонентів, що дозволяє розбити додаток на малі, керовані та багаторазово використовувані частини. Це покращує підтримуваність коду та його розширюваність.
Використовується бібліотека React Router для налаштування маршрутизації між різними сторінками додатка. Маршрути визначаються у файлах в директорії routes, а самі сторінки знаходяться у pages.
Для підтримки декількох мов використовується бібліотека i18next, яка забезпечує простий спосіб додавання та управління перекладами.
Для взаємодії з серверною частиною використовуються функції, що здійснюють HTTP-запити до API. Це дозволяє отримувати та надсилати дані між клієнтом та сервером. Ця структура проекту забезпечує чистоту та організованість коду, що полегшує тестування та подальшу підтримку додатка.
Для структуризації та розподілу функціональності клієнтської частини системи було використано підхід на основі пакетів (модулів). Кожен пакет відповідає за певну функціональну область та містить відповідні компоненти, сервіси, моделі даних тощо. Такий підхід дозволяє логічно розподілити відповідальність та сприяє підтримці і розширенню системи. Для візуалізації структури пакетів та їх взаємозв’язків була побудована діаграма пакетів (див.рис.А.5).
На діаграмі представлені наступні пакети:
-	src - основний пакет, який містить всі інші пакети;
-	config - пакет, який містить конфігураційні файли веб-додатку;
-	cinema - пакет, який містить компоненти, що відповідають за управління станом веб-додатку;
-	components - пакет, який містить всі компоненти веб-додатку;
-	utils - пакет, який містить всі перечислення веб-додатку;
-	pages - пакет, який містить всі компоненти, що відповідають за реалізацію певних функцій веб-додатку;
-	http - пакет, який містить всі запити до сервісу;
-	modals - пакет, який містить всі сервіси веб-додатку.


5.2	Взаємодія користувачів та клієнтської частини


Для демонстрації дій користувача в веб-застосунку, було створено діаграму прецедентів (див. рис. А.6). Система має трьох типів користувачів: неавторизованого користувача, авторизованого користувача та адміністратора. Діаграма показує доступний функціонал для користувачів системи в клієнтському застосунку.
Для відстеження роботи програмної системи для управління кінотеатрами розроблено UML-діаграму діяльності (див. рис. А.7). Діаграма описує процес управління системою кінотеатрів для авторизованого користувача. 
Діаграма починається з того, що користувач входить у систему, а потім переходить на головну сторінку з фільмами.
Після входу в систему користувач має можливість обрати одну з наступних сторінок: сторінку з фільмами, сторінку з розкладом показів, сторінку відгуків, сторінку з рекомендаціями або сторінку з квитками кошик). 
На сторінці з фільмами користувач може переглядати всі фільми, обрати конкретний фільм, переглядати детальну інформацію про обраний фільм, обрати показ цього фільму, обрати вільні місця на показ фільму, забронювати місце та купити квиток.
На сторінці з розкладом показів користувач може переглядати наявні розклади. На сторінці відгуків користувач має можливість написати відгук і надіслати його на пошту компанії.
Сторінка з рекомендаціями дозволяє користувачу переглядати персоналізовані рекомендації. На сторінці з квитками (кошик) може переглядати куплені квитки.
Ця діаграма допомагає зрозуміти, як користувач може взаємодіяти з різними компонентами системи кінотеатру, починаючи від входу в систему до перегляду та купівлі квитків, що забезпечує чітке уявлення про користувацький досвід у системі. 
 
6	ПРОЄКТУВАННЯ ТА КОДУВАННЯ МОБІЛЬНОЇ ЧАСТИНИ
6.1	Технології та архітектура мобільної частини


При розробці даної частини використано технології, що забезпечують надійність і продуктивність. Мовою програмування є Kotlin, яка відома своєю безпекою типів, читабельністю коду і підтримкою функціонального програмування. Для розробки застосовано Android SDK, який надає доступ до різноманітних інструментів і компонентів для побудови сучасних Android-додатків. Android Jetpack, що включає бібліотеки для управління життєвим циклом активностей та фрагментів, архітектурні компоненти для реалізації чистої архітектури і спрощення управління станом додатку, відіграє ключову роль у розробці.
Особливу увагу приділено архітектурі додатку, зокрема паттерну MVVM (Model-View-ViewModel) для розділення логіки інтерфейсу користувача від бізнес-логіки. Це забезпечує підтримку та розширюваність коду, що є важливим аспектом для подальшого розвитку проекту. Є репозиторії для забезпечення розділення джерел даних і зменшення зв'язності компонентів, що дозволяє легко змінювати джерела даних без значних змін в інших частинах додатку.
Для керування залежностями застосовано Dagger Hilt, що дозволяє ефективно впроваджувати ін'єкцію залежностей і підтримувати чистоту коду. Hilt спрощує конфігурацію компонентів та забезпечує масштабованість проекту, роблячи його зручним для великих команд розробників.
Комунікація з сервером здійснюється через REST API за допомогою бібліотеки Retrofit, яка забезпечує просту і ефективну роботу з мережевими запитами. Для асинхронного програмування використано Kotlin Coroutines, що дозволяє спрощувати роботу з асинхронними задачами і покращує читабельність коду.
Використання цих технологій і підходів дозволяє забезпечити високу якість, швидкість розробки і гнучкість у майбутніх змінах мобільного додатку. Завдяки цьому додаток має високу продуктивність, надійність та здатність до масштабування, що є важливим для забезпечення позитивного досвіду користувачів.


6.2	Структура мобільної частини


Розглянемо структуру проєкту:
-	activity - папка для збереження класів Activity, які представляють собою екрани додатка;
-	adapters - папка для адаптерів, які використовуються у списках та RecyclerView для зв'язування даних з інтерфейсом;
-	api - папка для класів, пов'язаних із мережевими запитами та взаємодією з API;
-	di - папка для управління залежностями для класів і конфігурацій, пов'язаних із Dagger Hilt;
-	model - папка для моделей даних, які використовуються в додатку для представлення різних об'єктів та сутностей;
-	App - основний клас додатка, який розширює клас Application та використовується для ініціалізації глобальних налаштувань;
-	MainActivity - головний екран, точка входу в додаток;
-	layout (res) - папка для XML-файлів, що описують макети екранів та компонентів інтерфейсу користувача;
-	menu (res) - папка для XML-файлів, які описують меню додатка.


6.3	Взаємодія користувачів з мобільною частиною 


Розглянемо діаграму активності процесу бронювання місця для перегляду фільму в кінотеатрі (див.рис.А.8). Процес починається з перегляду користувачем інформації про фільм. На цьому етапі він може ознайомитися з описом фільму, дізнатися опис фільму, тривалість, рейтинг та інші деталі, які допоможуть йому зробити вибір.
Після цього користувач переходить до перегляду розкладу сеансів для обраного фільму. Тут він може вибрати зручний час для перегляду, враховуючи свої плани та розклад кінотеатру. Наступним кроком є вибір конкретного сеансу. Якщо обраний сеанс не підходить, користувач може повернутися до вибору іншого сеансу, переглядаючи доступний розклад.
Після вибору сеансу користувач має можливість переглянути доступні місця в залі. Це важливий етап, оскільки дає змогу вибрати місце, яке найбільше підходить за розташуванням у залі. Після перегляду доступних місць, користувач обирає конкретні місця для себе або своєї компанії. На цьому етапі він вирішує, де саме він хотів би сидіти під час перегляду фільму.
Далі система показує одразу наявність обраних місць. Якщо місця доступні, користувач може завершити процес бронювання. Якщо ж обрані місця недоступні, він повертається до етапу вибору місць або навіть до вибору іншого сеансу, щоб знайти інші варіанти.
Після того як система підтвердить наявність місць, користувач може завершити процес бронювання, підтвердивши своє бронювання. Процес завершується успішним бронюванням місця для перегляду фільму.
Процес логічно побудований і забезпечує користувачу зручний та ефективний спосіб вибору і бронювання місця в кінотеатрі. Кожен етап передбачає можливість повернення на попередні кроки, що дає користувачеві гнучкість у прийнятті рішень та забезпечує прозорість і передбачуваність процесу.
Розглянемо Use-Case діаграму для мобільного застосунку (див.рис.А.9). Ця діаграма демонструє взаємодію користувача із системою, показуючи, які дії він може виконувати і як вони пов'язані між собою.
Користувач може авторизуватися в системі для отримання доступу до функціоналу застосунку. Якщо користувач новий, він може пройти процес реєстрації, створивши обліковий запис. Після входу в систему користувач може переглядати меню, всі доступні фільми, які показуються в кінотеатрі, а також може переглядати розклад сеансів для цих фільмів.
Користувач може отримати детальну інформацію про обраний зал, включаючи план розміщення місць. Після вибору конкретного сеансу користувач отримує інформацію про цей сеанс, включаючи час початку, дату та назву залу. На етапі обрання місця, користувач вибирає конкретне місце в залі, яке він хоче забронювати для перегляду фільму. Є можливість бронювання місця у залі.
 

7	ОГЛЯД РЕАЛІЗОВАНИХ ЧАСТИН ДОДАТКУ
7.1	Клієнтська частина додатку


Початком роботи з додатком є запуск. Після цього користувача побачить головну сторінку додатку для неавторизованих користувачів (див.рис.В.1). Такий користувач має можливість подивитись всі фільми що, показуються зараз у кінотеатрі, здійснити пошук за назвою та сортувати (за актуальністю, за алфавітом), переглянути детальну інформацію про фільм натиснувши на кнопку «Деталі» , що включає в себе опис фільму, тривалість, жанр, рейтинг. На цій сторінці також має можливість подивитись трейлер та розклад сеансів на даний фільм (див.рис.В.2 – В.3). Користувач може продивитись сторінку з розкладами всіх показів та сторінку з меню (див.рис.В.4 – В.5).  Неавторизований користувач має можливість увійти у системи, якщо акаунт вже був створений, або зареєструватись за потреби (див.рис.В.6 – В.7).
Після авторизації у користувача з’являються додаткові можливості. На сторінці з детальною інформацією з’являється можливість покупки квитка (див.рис.В.8). При натисканні на кнопку «Купити квиток» можна побачити сторінку на якій відображається інформація про зал, розклад даного сеансу, назву обраного фільму, схема залу з можливістю обирання та підтвердження місця (див.рис.В.9 – В.10). Користувач обирає місце, після цього продивляється інформацію про обрані місця та підтверджує покупку обраних місць. Після цього місця будуть зайнятті та інший користувач вже не зможе обрати ті ж самі.  Наступна можливість, написання відгуку на фільм з автоматичним посиланням на пошту компанії (див.рис.В.11). Користувачу потрібно обрати з списку фільм, що показується у кінотеатрі, вказати рейтинг за його думкою та написати певний коментар, що пояснює його оцінку. Після того я відгук написаний користувач натискає на кнопку «Надіслати відгук» та він автоматично надсилається на пошту (див.рис.В.12). Ця сторінка також підлягає переведенню на українську або англійську мову (див.рис.В.13). 
Також є сторінка з рекомендаціями для користувача, на цій сторінці він може побачити три рекомендованих фільми з описом, назвою, постером, рейтингом та з можливістю подивитись трейлер до фільму (див.рис.В.14). Остання сторінка – це кошик. На ній користувач може переглянути свої придбані квитки з детальною інформацією (див.рис.В.15).
Програмна система передбачає дві ролі звичайний користувач та адміністратор. Ввійдемо у систему як адміністратори. 
Після входу у систему на головній сторінці одразу бачимо, що є можливість видалення фільму з бази даних, для цього потрібно натиснути на кнопку «Видалити», та оновилось меню для адміністраторів з додатковими можливостями (див.рис.В.16 – В.17).  При натисканні на кнопку «Деталі» додалась можливість редагування інформації про фільм (див.рис.В18 – В.19).  При натисканні на кнопку «Редагувати» з’являється форма в якій можна вказати данні, після внесення змін слід натиснути на кнопку «Зберегти» та вся вказана інформація оновиться.  При натисканні на панелі меню на «Розклад» з’явилась можливість редагування та видалення показів (див.рис.В.20). На сторінці з меню можна додати позицію, редагувати або видалити її. Додати та редагувати можна заповнивши відповідні форми (див.рис.В.21 – В.22). У адміністраторів є панель з додавання фільмів, розкладів (див.рис.В.23). Додавання відбувається при заповнені відповідних форм та підтвердження додавання (див.рис.В.24 – В.25).  Сторінка працівників включає в себе перегляд всіх працівників, сортування за роллю, сортування за датою наймання на роботу та є функція пошуку. Створення, редагування та видалення працівника відбувається на цій же сторінці (див.рис. В.26 – В.27). Наступна сторінка включає в себе менеджмент для залів, перегляд наявних залів, створення, редагування, видалення їх (див.рис. В.28). Остання сторінка індивідуальна сторінка для адміністраторів показує всі продані квитки за останній час, інформацію про кожен квиток та підраховує загальний прибуток. На цій сторінці є можливість конвертування валют за реальним курсом (гривні – долари), конвертування відбувається при натисканні на кнопку «Конвертувати» (див.рис. В.29 – В.30). Після завершення роботи можна вийти за допомогою кнопки «Вийти».


7.2	Мобільна частина додатку


Для початку роботи авторизуємось у мобільному додатку, якщо акаунт вже був створений, або створимо новий за допомогою форми реєстрації (див.рис. В.31 – В.32). Після успішної авторизації бачимо головну сторінку з всіма фільмами та можливістю переглянути короткий опис про фільм (див.рис. В.33). При натисканні на кнопку «Деталі» відбувається перехід на сторінку з більш детальним описом про конкретний фільм та можливістю переглянути трейлер до фільму (див.рис. В.34 – В.35). Наступна сторінка «Розклади» на ній відбувається перегляд наявних сеансів з повною інформацією, на цій сторінці є кнопка «Перейти до залу» для кожного окремого сеансу (див. рис. В.36). При натисканні на кнопку відкривається сторінка з схемою залу та інформацією про сеанс, на цій сторінці можна побачити вільні та зайнятті місця, забронювати бажане місце. Бронювання відбувається після підтвердження та перегляду інформації про обрані місця (див.рис. В.37 – В.38). Далі можна натиснути на «Меню» у панелі та переглянути позиції, що є у кінотеатрі з повною інформацією про кожен продукт (див.рис. В.39). Після завершення всіх дій користувач може вийти з системи. 
 
ВИСНОВКИ


	У процесі виконання курсового проєкту була створена програмна система для управління кінотеатрами, що базується на основних принципах проектування архітектури програмного забезпечення. Використовувалися архітектурні шаблони та стилі, методики побудови програмних архітектур, проектування представницького шару, бізнес-шару, шару доступу до даних та шару сервісів. Було спроектовано основні шаблони проектування, що дозволило закріпити теоретичні знання та практичні навички.
Було чітко визначено задачі та після цього створено систему, що складається з серверної, клієнтської та мобільної частин. Усі частини піддаються масштабуванню, що забезпечує їхню адаптивність до зростання навантаження та кількості користувачів. Серверна частина відповідає за обробку запитів, управління базами даних та забезпечення безпеки. Клієнтська частина надає зручний інтерфейс для користувачів, дозволяючи переглядати розклад сеансів, бронювати квитки та отримувати актуальну інформацію. Мобільна частина розроблена для зручного доступу з мобільних пристроїв, забезпечуючи повну функціональність системи на різних платформах. Усі компоненти були спроєктовані з урахуванням принципів високої доступності, надійності та ефективності, що гарантує стабільну роботу системи та зручність користування для кінцевих користувачів.
Серверна частина була реалізована на мові програмування JavaScript за допомогою фреймворку NodeJS з PostgreSQL у якості СУБД. Клієнтська частина реалізована за допомогою фреймворку React на мові програмування JavaScript. Мобільний застосунок розроблений за допомогою мови програмування Kotlin.
У виході маємо готову програмну систему, яка відповідає всім поставленим вимогам для управління кінотеатрами.
ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ


1. Мартін Р. Чистий код: створення і рефакторинг за допомогою AGILE. – ФАБУЛА, 2019. – 416 с.
2. Krzystof Cwalina, Brad Abrams. Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries.–Addison-Wesley Professional, 2009. – 436 p.
3. Martin Fowler. Refactoring. Improving the Design of Existing Code– Addison-Wesley Professional, 1999. – 464 p.
4. Node.js v22.3.0 documentation. URL:  https://nodejs.org/docs/latest/api/ (Дата звернення 10.05.2024).
5. React documentation. URL: https://legacy.reactjs.org/docs/getting-started.html Дата звернення 20.05.2024).
6. Ролік тестування програмного продукту. URL: https://www.youtube.com/watch?v=9Uxawvg44hA
7. Програмний код продукту. URL: https://github.com/NureChernovaAnastasiia/apzkr-pzpi-21-6-chernova-anastasiia



 
ДОДАТОК А
Діаграми

 
Рисунок А.1 – Діаграма прецедентів
 
Рисунок А.2 – Діаграма діяльності

 
Рисунок А.3 – ER-модель даних
 
Рисунок А.4 – UML діаграма компонентів системи

 
Рисунок А.5 – UML діаграма пакетів
 
Рисунок А.6 – UML діаграма прецедентів системи

 
Рисунок А.7 – UML діаграма діяльності
 
Рисунок А.8 – Діаграма активності

 
Рисунок А.9 – Use-Case діаграма
ДОДАТОК Б
Фрагменти коду
Б.1 Програмний код Middleware для перевірки ролі користувача

1.	const jwt = require('jsonwebtoken');
2.	// Middleware для перевірки ролі користувача
3.	
4.	module.exports = function (req, res, next) {
5.	    if (req.method === "OPTIONS") {
6.	        next();
7.	    }
8.	    try {
9.	        const token = req.headers.authorization.split(' ')[1]; // Bearer <token>
10.	        if (!token) {
11.	            return res.status(401).json({ message: "Користувач не авторизован" });
12.	        }
13.	        const decoded = jwt.verify(token, process.env.SECRET_KEY);
14.	        req.user = decoded;
15.	        next();
16.	    } catch (e) {
17.	        res.status(401).json({ message: "Користувач не авторизован" });
18.	    }
19.	};

Б.2 Програмний код для контролеру фільмів

1.	const { Movie } = require('../models/models');
2.	const ApiError = require('../error/ApiError');
3.	
4.	class MovieController {
5.	    // Отримання всіх фільмів
6.	    async getAll(req, res, next) {
7.	        try {
8.	            const movies = await Movie.findAll();
9.	            return res.json(movies);
10.	        } catch (e) {
11.	            next(ApiError.internal('Error retrieving movies'));
12.	        }
13.	    }
14.	
15.	    // Отримання конкретного фільму за id
16.	    async getOne(req, res, next) {
17.	        const { id } = req.params;
18.	        try {
19.	            const movie = await Movie.findByPk(id);
20.	            if (!movie) {
21.	                return next(ApiError.badRequest('Movie not found'));
22.	            }
23.	            return res.json(movie);
24.	        } catch (e) {
25.	            next(ApiError.internal('Error retrieving movie'));
26.	        }
27.	    }
28.	
29.	    // Створення нового фільму
30.	    async create(req, res, next) {
31.	        const { title, description, duration, genre, rating, posterURL, trailerURL } = req.body;
32.	        try {
33.	            // Валідація вхідних даних
34.	            if (!title || !duration) {
35.	                return next(ApiError.badRequest('Title and duration are required'));
36.	            }
37.	            const movie = await Movie.create({ title, description, duration, genre, rating, posterURL, trailerURL });
38.	            return res.json(movie);
39.	        } catch (e) {
40.	            next(ApiError.internal('Error creating movie'));
41.	        }
42.	    }
43.	
44.	    // Оновлення існуючого фільму
45.	    async update(req, res, next) {
46.	        const { id } = req.params;
47.	        const { title, description, duration, genre, rating, posterURL, trailerURL } = req.body;
48.	        try {
49.	            const movie = await Movie.findByPk(id);
50.	            if (!movie) {
51.	                return next(ApiError.badRequest('Movie not found'));
52.	            }
53.	            if (!title || !duration) {
54.	                return next(ApiError.badRequest('Title and duration are required'));
55.	            }
56.	            movie.title = title;
57.	            movie.description = description;
58.	            movie.duration = duration;
59.	            movie.genre = genre;
60.	            movie.rating = rating;
61.	            movie.posterURL = posterURL;
62.	            movie.trailerURL = trailerURL;
63.	            await movie.save();
64.	            return res.json(movie);
65.	        } catch (e) {
66.	            next(ApiError.internal('Error updating movie'));
67.	        }
68.	    }
69.	
70.	    // Видалення фільму
71.	    async delete(req, res, next) {
72.	        const { id } = req.params;
73.	        try {
74.	            const movie = await Movie.findByPk(id);
75.	            if (!movie) {
76.	                return next(ApiError.badRequest('Movie not found'));
77.	            }
78.	            await movie.destroy();
79.	            return res.json({ message: 'Movie deleted' });
80.	        } catch (e) {
81.	            next(ApiError.internal('Error deleting movie'));
82.	        }
83.	    }
84.	}
85.	
86.	module.exports = new MovieController();

Б.3 Програмний код Middleware для перевірки ролі користувача

1.	const jwt = require('jsonwebtoken') 
2.	
3.	module.exports = function (role) {
4.	    return  function (req, res, next) {
5.	        if (req.method === "OPTINS") {
6.	            next()
7.	        }
8.	        try {
9.	            const token = req.headers.authorization.split(' ')[1]// Bearer
10.	            if (!token){
11.	                return res.status(401).json({message: "Користувач не авторизован"})
12.	            }
13.	            const decoded = jwt.verify(token, process.env.SECRET_KEY)
14.	            if(decoded.role !== role){
15.	                return res.status(403).json({message: "Немає доступа"})
16.	            }
17.	            req.user = decoded
18.	            next()
19.	        } catch (e) {
20.	            res.status(401).json({message: "Користувач не авторизован"})
21.	        }
22.	    }
23.	};

Б.4 Програмний код клієнтської частини сторінка відгуків

1.	import React, { useState, useEffect } from "react";
2.	import { createReview } from "../http/feedbackAPI";
3.	import { fetchMovies } from "../http/movieAPI";
4.	import { useTranslation } from "react-i18next";
5.	import i18n from "../components/i18n";
6.	
7.	const FeedbackForm = () => {
8.	  const { t } = useTranslation();
9.	  const [userId] = useState("1");
10.	  const [movieId, setMovieId] = useState("");
11.	  const [rating, setRating] = useState("");
12.	  const [comment, setComment] = useState("");
13.	  const [movies, setMovies] = useState([]);
14.	
15.	  // Завантаження списку фільмів
16.	  useEffect(() => {
17.	    const fetchMovieData = async () => {
18.	      try {
19.	        const movieData = await fetchMovies();
20.	        setMovies(movieData);
21.	      } catch (error) {
22.	        console.error("Error fetching movies:", error); // Виведення помилки у консоль
23.	      }
24.	    };
25.	
26.	    fetchMovieData();
27.	  }, []);
28.	
29.	  // Обробка надсилання форми
30.	  const handleSubmit = async (e) => {
31.	    e.preventDefault();
32.	    try {
33.	      await createReview({ userId, movieId, rating, comment });
34.	      alert("Review created successfully!"); // Сповіщення про успішне створення відгуку
35.	    } catch (error) {
36.	      console.error("Error creating review:", error);
37.	      alert("Error creating review"); // Сповіщення про помилку створення відгуку
38.	    }
39.	  };
40.	
41.	  // Зміна мови
42.	  const changeLanguage = (lng) => {
43.	    i18n.changeLanguage(lng);
44.	  };
45.	
46.	  return (
47.	    <div className="container">
48.	      <div className="d-flex justify-content-end">
49.	        <button
50.	          className="btn btn-secondary me-2"
51.	          onClick={() => changeLanguage("en")}
52.	        >
53.	          EN
54.	        </button>
55.	        <button
56.	          className="btn btn-secondary"
57.	          onClick={() => changeLanguage("ua")}
58.	        >
59.	          UA
60.	        </button>
61.	      </div>
62.	      <h1 className="text-center mt-4 mb-5">{t("Feedback Form")}</h1>
63.	      <form onSubmit={handleSubmit}>
64.	        <div className="mb-3">
65.	          <label htmlFor="movieId" className="form-label">
66.	            {t("Movie")}
67.	          </label>
68.	          <select
69.	            className="form-control"
70.	            id="movieId"
71.	            value={movieId}
72.	            onChange={(e) => setMovieId(e.target.value)}
73.	            required
74.	          >
75.	            <option value="">{t("Select a movie")}</option>
76.	            {movies.map((movie) => (
77.	              <option key={movie.id} value={movie.id}>
78.	                {movie.title}
79.	              </option>
80.	            ))}
81.	          </select>
82.	        </div>
83.	        <div className="mb-3">
84.	          <label htmlFor="rating" className="form-label">
85.	            {t("Rating")}
86.	          </label>
87.	          <input
88.	            type="number"
89.	            className="form-control"
90.	            id="rating"
91.	            value={rating}
92.	            onChange={(e) => setRating(e.target.value)}
93.	            min="1"
94.	            max="10"
95.	            required
96.	          />
97.	        </div>
98.	        <div className="mb-3">
99.	          <label htmlFor="comment" className="form-label">
100.	            {t("Comment")}
101.	          </label>
102.	          <textarea
103.	            className="form-control"
104.	            id="comment"
105.	            value={comment}
106.	            onChange={(e) => setComment(e.target.value)}
107.	            required
108.	          />
109.	        </div>
110.	        <button type="submit" className="btn btn-primary">
111.	          {t("Submit Review")}
112.	        </button>
113.	      </form>
114.	    </div>
115.	  );
116.	};
117.	
118.	export default FeedbackForm;

Б.5 Програмний код клієнтської частини для UserAPI

1.	import { $authHost, $host } from "./index";
2.	import { jwtDecode } from "jwt-decode";
3.	
4.	// Функція для реєстрації нового користувача
5.	export const registration = async (email, password) => {
6.	  const { data } = await $host.post("api/user/registration", {
7.	    email,
8.	    password,
9.	    role: "ADMIN",
10.	  });
11.	  localStorage.setItem("token", data.token);
12.	  return jwtDecode(data.token);
13.	};
14.	
15.	// Функція для входу користувача
16.	export const login = async (email, password) => {
17.	  const { data } = await $host.post("api/user/login", { email, password });
18.	  localStorage.setItem("token", data.token);
19.	  return jwtDecode(data.token);
20.	};
21.	
22.	// Функція для перевірки автентичності користувача
23.	export const check = async () => {
24.	  const token = localStorage.getItem("token");
25.	  if (!token) {
26.	    throw new Error("Токен не знайдено");
27.	  }
28.	
29.	  try {
30.	    const { data } = await $authHost.get("api/user/auth", {
31.	      headers: {
32.	        Authorization: `Bearer ${token}`,
33.	      },
34.	    });
35.	    localStorage.setItem("token", data.token);
36.	    return jwtDecode(data.token);
37.	  } catch (error) {
38.	    console.error("Помилка при перевірці ролі користувача:", error);
39.	    throw error;
40.	  }
41.	};
 
ДОДАТОК В
Інтерфейси сторінок

 
Рисунок В.1 – Головна сторінка для неавторизованого користувача

 
Рисунок В.2 – Всі фільми
 
Рисунок В.3 – Детальна інформація про конкретний фільм

 
Рисунок В.4 – Сторінка з всіма розкладами сеансів

 
Рисунок В.5 – Сторінка з меню
 
Рисунок В.6 – Сторінка авторизації

 
Рисунок В.7 – Сторінка реєстрації

 
Рисунок В.8 – Сторінка детальної інформації про фільм для авторизованого користувача
 
Рисунок В.9 – Сторінка залу на окремий фільм з можливістю обирання місця
 
Рисунок В.10 – Підтвердження покупки квитків на обрані місця

 
Рисунок В.11 – Сторінка відгуків
 
Рисунок В.12 –  Отриманий відгук на пошті компанії

  Рисунок В.13 –  Перекладена сторінка
 
Рисунок В.14 –  Сторінка рекомендацій

 
Рисунок В.15 –  Сторінка кошику

 
Рисунок В.16 –  Меню для адміністраторів
 
Рисунок В.17 –  Можливість видалення фільму
 
Рисунок В.18 –  Можливість редагування фільму

 
Рисунок В.19 –  Форма редагування фільму
 
Рисунок В.20 –  Можливість редагування та видалення показів

 
Рисунок В.21 –  Можливість редагування, видалення, додавання показів

 
Рисунок В.22 –  Форма додавання позиції меню

  Рисунок В.23 –  Адміністративна панель

 
Рисунок В.24 –  Форма додавання фільму
 
Рисунок В.25 –  Форма додавання розкладу

 
Рисунок В.26 –  Сторінка з працівниками 

 
Рисунок В.27 –  Форма редагування працівника

 
Рисунок В.28 –  Сторінка залів для адміністраторів
 
Рисунок В.29 –  Сторінка квитків та прибутку

 
Рисунок В.30 –  Конвертування на іншу валюту
 
Рисунок В.31 –  Сторінка авторизації мобільного додатку

 
Рисунок В.32 –  Сторінка реєстрації мобільного додатку
 
Рисунок В.33 –  Головна сторінка мобільного додатку

 
Рисунок В.34 –  Детальна інформація про фільм мобільного додатку

  
Рисунок В.35 –  Детальна інформація про фільм мобільного додатку

 
Рисунок В.36 –  Розклади сеансів мобільного додатку
 
Рисунок В.37 –  Сторінка залу мобільного додатку

 
Рисунок В.38 –  Підтвердження бронювання місця
 
Рисунок В.39 –  Сторінка меню мобільного додатку
 
ДОДАТОК Г
Результат перевірки роботи на антиплагіат

